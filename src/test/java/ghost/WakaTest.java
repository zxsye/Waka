/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghost;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import processing.core.*;

import java.io.*;
import java.util.*;


class WakaTest {
    private App app;
    private Waka waka;

    @BeforeEach
    public void before() {
        app = new App();
        PApplet.runSketch(new String[] {""}, app);
        app.noLoop();
        app.setup();

        // SETTING UP Waka
        waka = this.app.getManager().getPlayer();
    }

    @Test
    public void simpleTest() {
        assertNotNull(waka);
    }

    @Test
    public void mouthAnimation() {
        // Mouth starts left
        assertEquals(waka.getAllSprites().get(Direction.LEFT), waka.getCurSprite());
        for (int j = 0; j < 9; j++) {
            this.app.draw();
        }
        assertEquals(waka.getClosedSprite(), waka.getCurSprite());
    }

    @Test
    public void collectables() {
        // Collecting one fruit
        assertEquals(0, waka.getFruits());
        for (int j = 0; j < 8; j++) { // move one grid
            waka.tick();
        }
        assertEquals(1, waka.getFruits());

        // Collecting SuperFruit
        for (int j = 0; j < 8; j++) { // move another grid
            waka.tick();
        }
        assertEquals(GhostMode.FRIGHTENED, app.getManager().getGhosts().get(0).getCurMode());

        // Collecting SodaCan
        for (int j = 0; j < 19; j++) { // move 2 grids left
            waka.tick();
        }
        assertEquals(GhostMode.FRIGHTENED, app.getManager().getGhosts().get(0).getCurMode());
        assertTrue(app.getManager().getGhosts().get(0).isSodaFrightened());
    }

    @Test
    public void ghostCollision() {
        // Alive ghost
        assertEquals(3, waka.getLives());
        waka.changeDirection(App.RIGHT);
        for (int j = 0; j < 16; j++) { // move 2 grids right, into ghost
            waka.tick();
        }
        assertEquals(2, waka.getLives());
    }

    @Test
    public void frightenedGhost() {
        assertEquals(3, waka.getLives());
        for (Ghost g : app.getManager().getGhosts()) {
            g.beFrightened();
        }
        waka.changeDirection(App.RIGHT);
        for (int j = 0; j < 16; j++) { // move 2 grids right, into ghost
            waka.tick();
        }
        assertEquals(3, waka.getLives()); // check no loss of life
    }

    @Test
    public void sodaGhost() {
        assertEquals(3, waka.getLives());
        for (Ghost g : app.getManager().getGhosts()) {
            g.beSodaFright();
        }
        waka.changeDirection(App.RIGHT);
        for (int j = 0; j < 16; j++) { // move 2 grids right, into ghost
            waka.tick();
        }
        assertEquals(2, waka.getLives()); // check yes loss of life
    }

    @Test
    public void wakaDies() {
        // Losing lives
        assertEquals(3, waka.getLives());
        for (int j = 0; j < 130; j++) { // moves to left and waits until ghosts kill
            app.draw();
        }
        assertEquals(0, waka.getLives());
        assertTrue(this.app.getManager().isGameOver());

        // Trying to move during death screen

    }

}
