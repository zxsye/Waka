/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghost;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import processing.core.*;

import java.io.*;
import java.util.*;


class GhostTest {
    public Ghost c; // chaser
    public Ghost a; // ambusher
    public Ghost i; // ignorant
    public Ghost w; // whim
    public App app;

    @BeforeEach
    public void before() {
        app = new App();
        PApplet.runSketch(new String[] {""}, app);
        app.noLoop();
        app.setup();

        // SETTING UP GHOSTS
        List<Integer> modeLengths = new ArrayList<Integer>();
        modeLengths.add(2);
        modeLengths.add(4);
        modeLengths.add(6);

        c = new Ghost(10, 14, 2, this.app, modeLengths);
        a = new Ambusher(12, 14, 2, this.app, modeLengths);
        i = new Ignorant(14, 14, 2, this.app, modeLengths);
        w = new Whim(16, 14, 2, this.app, modeLengths);
    }

    @Test
    public void simple() {
        assertNotNull(c);
        assertNotNull(a);
        assertNotNull(i);
        assertNotNull(w);

        assertEquals(app.getManager().getArena().getGrid()[0][0], c.getCorner());
        assertEquals(app.getManager().getArena().getGrid()[0][28-1], a.getCorner());
        assertEquals(app.getManager().getArena().getGrid()[36-1][0], i.getCorner());
        assertEquals(app.getManager().getArena().getGrid()[36-1][28-1], w.getCorner());
    }

    @Test
    public void calculators() {
        // methods for calculating distance
    }

    @Test
    public void normalBehaviour() {
        // Behaviour when normal

        // Tick
        assertTrue(c.tick());
        assertTrue(w.tick());
        assertTrue(a.tick());
        assertTrue(i.tick());
        // drawing
        assertTrue(c.draw());
        assertTrue(w.draw());
        assertTrue(a.draw());
        assertTrue(i.draw());
        // debugLine
        assertTrue(c.drawDebugLine());
        assertTrue(w.drawDebugLine());
        assertTrue(a.drawDebugLine());
        assertTrue(i.drawDebugLine());

        // Change into CHASE MODE
        for (int j = 0; j < 2*60; j++) {
            c.tick();
            w.tick();
            a.tick();
            i.tick();
        }
        assertEquals(GhostMode.CHASE, c.getCurMode());
        assertEquals(GhostMode.CHASE, w.getCurMode());
        assertEquals(GhostMode.CHASE, a.getCurMode());
        assertEquals(GhostMode.CHASE, i.getCurMode());

    }

    @Test
    public void scatterToChase() {
        // STARTING WITH SCATTER
        assertEquals(GhostMode.SCATTER, c.getCurMode());
        assertEquals(GhostMode.SCATTER, w.getCurMode());
        assertEquals(GhostMode.SCATTER, a.getCurMode());
        assertEquals(GhostMode.SCATTER, i.getCurMode());

        // FIRST SWITCH: to Chase
        for (int j = 0; j < 2.1*60; j++) {
            c.tick();
            w.tick();
            a.tick();
            i.tick();
        }

        assertEquals(GhostMode.CHASE, c.getCurMode());
        assertEquals(GhostMode.CHASE, w.getCurMode());
        assertEquals(GhostMode.CHASE, a.getCurMode());
        assertEquals(GhostMode.CHASE, i.getCurMode());

        // SECOND SWITCH: to Scatter
        for (int j = 0; j < 4*60; j++) {
            c.tick();
            w.tick();
            a.tick();
            i.tick();
        }

        assertEquals(GhostMode.SCATTER, c.getCurMode());
        assertEquals(GhostMode.SCATTER, w.getCurMode());
        assertEquals(GhostMode.SCATTER, a.getCurMode());
        assertEquals(GhostMode.SCATTER, i.getCurMode());

        // FINAL SWITCH: back to beginning of modeLengths
        for (int j = 0; j < 6*60; j++) {
            c.tick();
            w.tick();
            a.tick();
            i.tick();
        }

        assertEquals(GhostMode.SCATTER, c.getCurMode());
        assertEquals(GhostMode.SCATTER, w.getCurMode());
        assertEquals(GhostMode.SCATTER, a.getCurMode());
        assertEquals(GhostMode.SCATTER, i.getCurMode());
    }

    @Test
    public void frightenedBehaviour() {
        // Behaviour when frightened
        c.beFrightened();
        w.beFrightened();
        a.beFrightened();
        i.beFrightened();

        // check previous mode is stored
        assertEquals(GhostMode.SCATTER, c.getPrevMode());
        assertEquals(GhostMode.SCATTER, w.getPrevMode());
        assertEquals(GhostMode.SCATTER, a.getPrevMode());
        assertEquals(GhostMode.SCATTER, i.getPrevMode());

        // Tick
        assertTrue(c.tick());
        assertTrue(w.tick());
        assertTrue(a.tick());
        assertTrue(i.tick());
        // drawing
        assertTrue(c.draw());
        assertTrue(w.draw());
        assertTrue(a.draw());
        assertTrue(i.draw());
        // debugLine
        assertFalse(c.drawDebugLine());
        assertFalse(w.drawDebugLine());
        assertFalse(a.drawDebugLine());
        assertFalse(i.drawDebugLine());

        // Switching back to previous mode
        for (int j = 0; j < 5.1*60; j++) {
            c.tick();
            w.tick();
            a.tick();
            i.tick();
        }

        assertEquals(GhostMode.SCATTER, c.getCurMode());
        assertEquals(GhostMode.SCATTER, w.getCurMode());
        assertEquals(GhostMode.SCATTER, a.getCurMode());
        assertEquals(GhostMode.SCATTER, i.getCurMode());

    }

    @Test
    public void deadBehaviour() {
        // Behaviour when dead
        c.die();
        w.die();
        a.die();
        i.die();

        // Tick
        assertFalse(c.tick());
        assertFalse(w.tick());
        assertFalse(a.tick());
        assertFalse(i.tick());
        // drawing
        assertFalse(c.draw());
        assertFalse(w.draw());
        assertFalse(a.draw());
        assertFalse(i.draw());
        // debugLine
        assertFalse(c.drawDebugLine());
        assertFalse(w.drawDebugLine());
        assertFalse(a.drawDebugLine());
        assertFalse(i.drawDebugLine());
    }

    @Test
    public void sodaBehaviour() {
        // Behaviour when soda mode
        c.beSodaFright();
        w.beSodaFright();
        a.beSodaFright();
        i.beSodaFright();
        assertEquals(GhostMode.FRIGHTENED, c.getCurMode());
        assertEquals(GhostMode.FRIGHTENED, w.getCurMode());
        assertEquals(GhostMode.FRIGHTENED, a.getCurMode());
        assertEquals(GhostMode.FRIGHTENED, i.getCurMode());

        assertTrue(c.isSodaFrightened());
        assertTrue(w.isSodaFrightened());
        assertTrue(a.isSodaFrightened());
        assertTrue(i.isSodaFrightened());

        // Tick
        assertTrue(c.tick());
        assertTrue(w.tick());
        assertTrue(a.tick());
        assertTrue(i.tick());
        // drawing
        assertTrue(c.draw());
        assertTrue(w.draw());
        assertTrue(a.draw());
        assertTrue(i.draw());
        // debugLine
        assertFalse(c.drawDebugLine());
        assertFalse(w.drawDebugLine());
        assertFalse(a.drawDebugLine());
        assertFalse(i.drawDebugLine());

        // Becoming normal frightened after Waka eats superFruit
        c.beFrightened();
        w.beFrightened();
        a.beFrightened();
        i.beFrightened();
        assertEquals(GhostMode.FRIGHTENED, c.getCurMode());
        assertEquals(GhostMode.FRIGHTENED, w.getCurMode());
        assertEquals(GhostMode.FRIGHTENED, a.getCurMode());
        assertEquals(GhostMode.FRIGHTENED, i.getCurMode());


    }

    @Test
    public void cornerBehaviour() {
        List<Integer> modeLengths = new ArrayList<Integer>();
        modeLengths.add(2);
        modeLengths.add(4);
        modeLengths.add(6);

        c = new Ghost(2, 4, 2, this.app, modeLengths); // start walking towards corner (left)
        for (int j = 0; j < 10; j++) {
            c.tick();
        }
        // After colliding with dead end, check if can move left again;
        assertEquals(false, c.possibleMoves(w).containsValue(Direction.LEFT));
    }

    @Test
    public void resets() {
        // Move for a bit
        for (int j = 0; j < 5.1*60; j++) {
            c.tick();
            w.tick();
            a.tick();
            i.tick();
        }
        // Reset all
        c.resetGhost();
        w.resetGhost();
        a.resetGhost();
        i.resetGhost();

        assertEquals(10*16, c.getx());
        assertEquals(14*16, c.gety());
        assertEquals(12*16, a.getx());
        assertEquals(14*16, a.gety());
        assertEquals(14*16, i.getx());
        assertEquals(14*16, i.gety());
        assertEquals(16*16, w.getx());
        assertEquals(14*16, w.gety());

    }

}
