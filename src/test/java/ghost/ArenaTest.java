/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghost;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import processing.core.*;

import java.util.*;


class ArenaTest {
    public Arena arena;
    public App app;

    @BeforeEach
    public void before() {
        app = new App();
        PApplet.runSketch(new String[] {""}, app);
        app.noLoop();
        app.setup();
    }

    @Test
    public void simpleTest() {
        this.arena = new Arena(this.app, "map.txt");
        assertNotNull(this.app);
        assertNotNull(this.arena);
    }

    @Test
    public void testParse() {
        this.arena = new Arena(this.app, "map.txt");

        // Testing FRUITS
        assertEquals(298, arena.getTotalFruits());

        // Testing Getters
        assertEquals(13, arena.getWakaStart()[0]);
        assertEquals(20, arena.getWakaStart()[1]);

        assertEquals(10, arena.getGhostStart().get(0)[0]);
        assertEquals(14, arena.getGhostStart().get(0)[1]);

        assertEquals(12, arena.getGhostStart().get(1)[0]);
        assertEquals(14, arena.getGhostStart().get(1)[1]);

        assertEquals(14, arena.getGhostStart().get(2)[0]);
        assertEquals(14, arena.getGhostStart().get(2)[1]);

        assertEquals(16, arena.getGhostStart().get(3)[0]);
        assertEquals(14, arena.getGhostStart().get(3)[1]);

        // Testing ART
        Map<Character, PImage> sample = arena.getArenaArt();
        for (Character k : sample.keySet()) {
            assertNotNull(sample.get(k));
        }

        // Testing GRID
        Cell[][] grid = arena.getGrid();
        assertNotNull(grid);
        for (int i = 0; i < 36; i++) {
            for (int j = 0; j < 28; j++) {
                Cell cell = grid[i][j];
                assertNotNull(cell);
                assertEquals(cell.getGridx(), j);
                assertEquals(cell.getGridy(), i);
            }
        }



    }

    @Test
    public void badParse() {
        this.arena = new Arena(this.app, "ASDF.txt");
        assertEquals(arena.getArenaArt().size(), 9); // image can still be parsed

    }

    @Test
    public void badGetters() {
        this.arena = new Arena(this.app, "map.txt");

    }

}
